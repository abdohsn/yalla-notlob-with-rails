{"ast":null,"code":"import consumer from \"./consumer\";\nconsumer.subscriptions.create(\"NotificationChannel\", {\n  connected: function connected() {\n    console.log(\"connected ya ray2\"); // Called when the subscription is ready for use on the server\n  },\n  disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n  },\n  received: function received(data) {\n    console.log(data);\n\n    if (data[\"header\"] == \"new item\") {\n      console.log(\"done\");\n      console.log(data[\"users\"]);\n      var ids = data[\"users\"].map(function (user) {\n        return \"#order\" + data[\"order_id\"] + \"user\" + user;\n      });\n      ids.map(function (user) {\n        if ($(user).length) {\n          $(user).append('<tr><td>' + data[\"orderItem\"].name + '</td><td>' + data[\"orderItem\"].item_name + '</td><td>' + data[\"orderItem\"].amount + '</td><td>' + data[\"orderItem\"].price + '</td><td>' + data[\"orderItem\"].comment + '</td></tr>'); // Called when there's incoming data on the websocket for this channel\n        }\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/home/ahmed/ITI/Rails_Project/yalla-notlob-with-rails/app/javascript/channels/notification_channel.js"],"names":["consumer","subscriptions","create","connected","console","log","disconnected","received","data","ids","map","user","$","length","append","name","item_name","amount","price","comment"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEAA,QAAQ,CAACC,aAAT,CAAuBC,MAAvB,CAA8B,qBAA9B,EAAqD;AACnDC,EAAAA,SADmD,uBACvC;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EADU,CAEV;AACD,GAJkD;AAKnDC,EAAAA,YALmD,0BAKpC,CACb;AACD,GAPkD;AASnDC,EAAAA,QATmD,oBAS1CC,IAT0C,EASpC;AACbJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;;AACA,QAAGA,IAAI,CAAC,QAAD,CAAJ,IAAmB,UAAtB,EAAiC;AAE/BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAAC,OAAD,CAAhB;AACA,UAAIC,GAAG,GAAID,IAAI,CAAC,OAAD,CAAJ,CAAcE,GAAd,CAAkB,UAAAC,IAAI;AAAA,eAAI,WAASH,IAAI,CAAC,UAAD,CAAb,GAA0B,MAA1B,GAAiCG,IAArC;AAAA,OAAtB,CAAX;AAEAF,MAAAA,GAAG,CAACC,GAAJ,CAAQ,UAAAC,IAAI,EAAI;AACd,YAAGC,CAAC,CAACD,IAAD,CAAD,CAAQE,MAAX,EAAmB;AACjBD,UAAAA,CAAC,CAACD,IAAD,CAAD,CAAQG,MAAR,CAAe,aAAaN,IAAI,CAAC,WAAD,CAAJ,CAAkBO,IAA/B,GAAsC,WAAtC,GAAoDP,IAAI,CAAC,WAAD,CAAJ,CAAkBQ,SAAtE,GAAkF,WAAlF,GAAgGR,IAAI,CAAC,WAAD,CAAJ,CAAkBS,MAAlH,GAA2H,WAA3H,GAAyIT,IAAI,CAAC,WAAD,CAAJ,CAAkBU,KAA3J,GAAmK,WAAnK,GAAiLV,IAAI,CAAC,WAAD,CAAJ,CAAkBW,OAAnM,GAA6M,YAA5N,EADiB,CAEjB;AACD;AACF,OALD;AAMD;AAGF;AA1BkD,CAArD","sourcesContent":["import consumer from \"./consumer\";\n\nconsumer.subscriptions.create(\"NotificationChannel\", {\n  connected() {\n    console.log(\"connected ya ray2\");\n    // Called when the subscription is ready for use on the server\n  },\n  disconnected() {\n    // Called when the subscription has been terminated by the server\n  },\n\n  received(data) {\n    console.log(data);\n    if(data[\"header\"] ==  \"new item\"){\n\n      console.log(\"done\");\n      console.log(data[\"users\"]);\n      let ids =  data[\"users\"].map(user => \"#order\"+data[\"order_id\"]+\"user\"+user);\n\n      ids.map(user => {\n        if($(user).length) {\n          $(user).append('<tr><td>' + data[\"orderItem\"].name + '</td><td>' + data[\"orderItem\"].item_name + '</td><td>' + data[\"orderItem\"].amount + '</td><td>' + data[\"orderItem\"].price + '</td><td>' + data[\"orderItem\"].comment + '</td></tr>')\n          // Called when there's incoming data on the websocket for this channel\n        }\n      });\n    }\n    \n   \n  },\n});\n"]},"metadata":{},"sourceType":"module"}